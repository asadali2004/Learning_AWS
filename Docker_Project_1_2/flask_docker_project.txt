
Dockerized Flask App with requirements.txt
==========================================

✅ Part 1: Why we didn't use requirements.txt earlier
-----------------------------------------------------

In the first simple Docker Python project, we only used:

    print("Hello from Python inside Docker!")

That uses no external libraries, so we didn't need `requirements.txt`.

Now, with:

    from flask import Flask

Flask is an external package, so we must install it. That's where `requirements.txt` helps.

✅ Part 2: How to Dockerize Your Flask App
------------------------------------------

📁 Project structure:

    docker-flask/
    ├── app.py
    └── requirements.txt

✅ 1. app.py

    from flask import Flask

    app = Flask(__name__)

    @app.route('/')
    def hello():
        return "Hello, World!"

    if __name__ == "__main__":
        app.run(host='0.0.0.0', port=8000)

✅ 2. requirements.txt

    flask

✅ 3. Dockerfile

    FROM python:3.10-slim

    WORKDIR /app

    COPY requirements.txt .
    RUN pip install --no-cache-dir -r requirements.txt

    COPY app.py .

    CMD ["python", "app.py"]

✅ 4. Build the Docker image

    docker build -t flask-app .

✅ 5. Run the Docker container

    docker run -p 8000:8000 flask-app

🎉 Access the app:

    http://<your-ec2-public-ip>:8000
    OR
    http://127.0.0.1:8000

🧠 Why we use requirements.txt?

- Keeps track of dependencies
- Enables reproducible builds
- Required in team or production use
- Crucial for frameworks like Flask, Django, FastAPI, etc.
